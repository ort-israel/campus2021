{"version":3,"sources":["../src/msr_helper_stereoaudio.js"],"names":["define","$","log","debug","scriptprocessornode","requestDataInvoked","recordingLength","isPaused","deviceSampleRate","leftchannel","rightchannel","recording","volume","audioInput","context","sampleRate","mimeType","isPCM","numChannels","msr","audioctx","mediaStream","volumeGainNode","clone","extend","init","indexOf","audioChannels","misc","that","createGain","createMediaStreamSource","connect","bufferSize","createJavaScriptNode","createScriptProcessor","console","onaudioprocess","e","left","inputBuffer","getChannelData","push","Float32Array","right","audioanalyser","core","destination","record","length","requestData","internalLeftChannel","slice","internalRightChannel","internalRecordingLength","leftBuffer","mergeBuffers","interleaved","rightBuffer","interleave","blob","Blob","convertoFloat32ToInt16","type","ondataavailable","buffer","ArrayBuffer","view","DataView","writeUTFBytes","setUint32","setUint16","lng","index","i","setInt16","stop","disconnect","leftChannel","rightChannel","result","inputIndex","channelBuffer","offset","set","string","setUint8","charCodeAt","l","buf","Int16Array","pause","resume"],"mappings":"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","sourcesContent":["/* jshint ignore:start */\ndefine(['jquery',\n        'core/log'],\n    function ($, log) {\n\n        \"use strict\"; // jshint ;_;\n\n        log.debug('PoodLL Stereo Audio Recorder Helper: initialising');\n\n        return {\n\n            //globals??\n            scriptprocessornode: null,\n            requestDataInvoked: false,\n            recordingLength: 0,\n            isPaused: false,\n\n            // variables\n            deviceSampleRate: 48000,//44100, // range: 22050 to 96000\n            leftchannel: [],\n            rightchannel: [],\n            recording: false,\n            volume: null,\n            audioInput: null,\n            context: null,\n            sampleRate: 0,\n            mimeType: 0,\n            isPCM: false,\n            numChannels: 1,\n            msr: null,\n            audioctx: null,\n            mediaStream: null,\n            volumeGainNode: null,\n\n            //for making multiple instances\n            clone: function () {\n                return $.extend(true, {}, this);\n            },\n\n\n            init: function (msr, mediaStream, audioctx) {\n\n                this.msr = msr;\n                this.audioctx = audioctx;\n                this.mediaStream = mediaStream;\n                this.deviceSampleRate = audioctx.sampleRate;\n                //this.sampleRate = msr.sampleRate || this.deviceSampleRate;\n                this.sampleRate =  this.deviceSampleRate;\n                this.mimeType = msr.mimeType || 'audio/wav';\n                this.isPCM = this.mimeType.indexOf('audio/pcm') > -1;\n                this.numChannels = msr.audioChannels || 2;\n\n                //and then further init'ing\n                this.misc();\n\n            },\n\n            misc: function () {\n                var that = this;\n                // creates the audio context\n                var context = this.audioctx;\n\n                // creates a gain node\n                this.volumeGainNode = context.createGain();\n\n                var volume = this.volumeGainNode;\n\n                // creates an audio node from the microphone incoming stream\n                //the node chain is audioinput -> volume -> analyser -> scriptprocessingnode\n                this.audioInput = context.createMediaStreamSource(this.mediaStream);\n\n                // creates an audio node from the microphone incoming stream\n                var audioInput = this.audioInput;\n\n                // connect the stream to the gain node\n                audioInput.connect(volume);\n\n                /* From the spec: This value controls how frequently the audioprocess event is\n                 dispatched and how many sample-frames need to be processed each call.\n                 Lower values for buffer size will result in a lower (better) latency.\n                 Higher values will be necessary to avoid audio breakup and glitches\n                 Legal values are 256, 512, 1024, 2048, 4096, 8192, and 16384.*/\n                var bufferSize = this.msr.bufferSize || 2048;\n                if (this.msr.bufferSize === 0) {\n                    bufferSize = 0;\n                }\n\n                var scriptprocessornode = null;\n                if (context.createJavaScriptNode) {\n                    scriptprocessornode = context.createJavaScriptNode(bufferSize, this.numChannels, this.numChannels);\n                } else if (context.createScriptProcessor) {\n                    scriptprocessornode = context.createScriptProcessor(bufferSize, this.numChannels, this.numChannels);\n                } else {\n                    throw 'WebAudio API has no support on this browser.';\n                }\n\n                this.bufferSize = scriptprocessornode.bufferSize;\n                this.requestDataInvoked = false;\n\n                // sometimes \"scriptprocessornode\" disconnects from he destination-node\n                // and there is no exception thrown in this case.\n                // and obviously no further \"ondataavailable\" events will be emitted.\n                // below global-scope variable is added to debug such unexpected but \"rare\" cases.\n                this.scriptprocessornode = scriptprocessornode;\n\n                if (this.numChannels === 1) {\n                    console.debug('All right-channels are skipped.');\n                }\n\n                this.isPaused = false;\n\n                //http://webaudio.github.io/web-audio-api/#the-scriptprocessornode-interface\n                scriptprocessornode.onaudioprocess = function (e) {\n                    if (!that.recording || that.requestDataInvoked || that.isPaused) {\n                        return;\n                    }\n\n                    var left = e.inputBuffer.getChannelData(0);\n                    that.leftchannel.push(new Float32Array(left));\n\n                    if (that.numChannels === 2) {\n                        var right = e.inputBuffer.getChannelData(1);\n                        that.rightchannel.push(new Float32Array(right));\n                    }\n                    that.recordingLength += that.bufferSize;\n                };\n\n                volume.connect(this.msr.audioanalyser.core);\n                // volume.connect(this.scriptprocessornode);\n                this.msr.audioanalyser.core.connect(scriptprocessornode);\n                scriptprocessornode.connect(context.destination);\n\n            },\n\n            record: function () {\n                this.recording = true;\n                // reset the buffers for the new recording\n                this.leftchannel.length = this.rightchannel.length = 0;\n                this.recordingLength = 0;\n            },\n\n            requestData: function () {\n\n                if (this.isPaused) {\n                    return;\n                }\n\n                if (this.recordingLength === 0) {\n                    this.requestDataInvoked = false;\n                    return;\n                }\n\n                this.requestDataInvoked = true;\n                // clone stuff\n                var internalLeftChannel = this.leftchannel.slice(0);\n                var internalRightChannel = this.rightchannel.slice(0);\n                var internalRecordingLength = this.recordingLength;\n\n                // reset the buffers for the new recording\n                this.leftchannel.length = this.rightchannel.length = [];\n                this.recordingLength = 0;\n                this.requestDataInvoked = false;\n\n                // we flat the left and right channels down\n                var leftBuffer = this.mergeBuffers(internalLeftChannel, internalRecordingLength);\n\n                var interleaved = leftBuffer;\n\n                // we interleave both channels together\n                if (this.numChannels === 2) {\n                    var rightBuffer = this.mergeBuffers(internalRightChannel, internalRecordingLength); // bug fixed via #70,#71\n                    this.interleaved = this.interleave(leftBuffer, rightBuffer);\n                }\n\n                if (this.isPCM) {\n                    // our final binary blob\n                    var blob = new Blob([this.convertoFloat32ToInt16(interleaved)], {\n                        type: 'audio/pcm'\n                    });\n\n                    this.msr.ondataavailable(blob);\n                    return;\n                }\n\n                // we create our wav file\n                var buffer = new ArrayBuffer(44 + interleaved.length * 2);\n                var view = new DataView(buffer);\n\n                // RIFF chunk descriptor\n                this.writeUTFBytes(view, 0, 'RIFF');\n\n                // -8 (via #97)\n                view.setUint32(4, 44 + interleaved.length * 2 - 8, true);\n\n                this.writeUTFBytes(view, 8, 'WAVE');\n                // FMT sub-chunk\n                this.writeUTFBytes(view, 12, 'fmt ');\n                view.setUint32(16, 16, true);\n                view.setUint16(20, 1, true);\n                // stereo (2 channels)\n                view.setUint16(22, this.numChannels, true);\n                view.setUint32(24, this.sampleRate, true);\n                view.setUint32(28, this.sampleRate * this.numChannels * 2, true); // numChannels * 2 (via #71)\n                view.setUint16(32, this.numChannels * 2, true);\n                view.setUint16(34, 16, true);\n                // data sub-chunk\n                this.writeUTFBytes(view, 36, 'data');\n                view.setUint32(40, interleaved.length * 2, true);\n\n                // write the PCM samples\n                var lng = interleaved.length;\n                var index = 44;\n                var volume = 1;\n                for (var i = 0; i < lng; i++) {\n                    view.setInt16(index, interleaved[i] * (0x7FFF * volume), true);\n                    index += 2;\n                }\n\n                // our final binary blob\n                var blob = new Blob([view], {\n                    type: 'audio/wav'\n                });\n                this.msr.ondataavailable(blob);\n            },\n\n            stop: function () {\n                // we stop recording\n                this.recording = false;\n                this.requestData();\n                this.audioInput.disconnect();\n            },\n\n            interleave: function (leftChannel, rightChannel) {\n                var length = leftChannel.length + rightChannel.length;\n                var result = new Float32Array(length);\n\n                var inputIndex = 0;\n\n                for (var index = 0; index < length;) {\n                    result[index++] = leftChannel[inputIndex];\n                    result[index++] = rightChannel[inputIndex];\n                    inputIndex++;\n                }\n                return result;\n            },\n\n            mergeBuffers: function (channelBuffer, recordingLength) {\n                var result = new Float32Array(recordingLength);\n                var offset = 0;\n                var lng = channelBuffer.length;\n                for (var i = 0; i < lng; i++) {\n                    var buffer = channelBuffer[i];\n                    result.set(buffer, offset);\n                    offset += buffer.length;\n                }\n                return result;\n            },\n\n            writeUTFBytes: function (view, offset, string) {\n                var lng = string.length;\n                for (var i = 0; i < lng; i++) {\n                    view.setUint8(offset + i, string.charCodeAt(i));\n                }\n            },\n\n            convertoFloat32ToInt16: function (buffer) {\n                var l = buffer.length;\n                var buf = new Int16Array(l)\n\n                while (l--) {\n                    buf[l] = buffer[l] * 0xFFFF; //convert to 16 bit\n                }\n                return buf.buffer\n            },\n\n\n            pause: function () {\n                this.isPaused = true;\n            },\n\n            resume: function () {\n                this.isPaused = false;\n            }\n\n        };// end of returned object\n    });// total end\n"],"file":"msr_helper_stereoaudio.min.js"}